<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Appraisal_Bag_Empty" xml:space="preserve">
    <value>¿Eh?[pause=0] No tienes ningún objeto contigo.</value>
    <comment></comment>  </data>
  <data name="Appraisal_Choose" xml:space="preserve">
    <value>Elige el cofre que quieras que abra. (Puedes usar {0} para seleccionar múltiples objetos.)</value>
    <comment></comment>  </data>
  <data name="Appraisal_Choose_Multi" xml:space="preserve">
    <value>Puedo abrirte todo eso por {0}.</value>
    <comment></comment>  </data>
  <data name="Appraisal_Choose_One" xml:space="preserve">
    <value>Puedo abrir tu {1} por {0}.</value>
    <comment></comment>  </data>
  <data name="Appraisal_End" xml:space="preserve">
    <value>¡Todo listo![pause=0] Comprueba la mercancía.</value>
    <comment></comment>  </data>
  <data name="Appraisal_Goodbye" xml:space="preserve">
    <value>¡Vuelve con más cofres la próxima vez!</value>
    <comment></comment>  </data>
  <data name="Appraisal_Info_001" xml:space="preserve">
    <value>Esos cofres que recoges en las mazmorras... ¿Alguna vez te has preguntado qué hay dentro de ellos?</value>
    <comment></comment>  </data>
  <data name="Appraisal_Info_002" xml:space="preserve">
    <value>Están completamente cerrados.[pause=0] No hay ninguna llave en el mundo que puedan abrirlas.</value>
    <comment></comment>  </data>
  <data name="Appraisal_Info_003" xml:space="preserve">
    <value>¡Pero yo no necesito llaves![pause=0] ¡Los romperé todos y te daré lo que hay dentro!</value>
    <comment></comment>  </data>
  <data name="Appraisal_No_Money" xml:space="preserve">
    <value>¡Oye, oye![pause=0] ¡No tienes suficiente \uE024 para esto!</value>
    <comment></comment>  </data>
  <data name="Appraisal_Option_Open" xml:space="preserve">
    <value>Abrir Cofres</value>
    <comment></comment>  </data>
  <data name="Appraisal_Return" xml:space="preserve">
    <value>¿Necesitas algo más?</value>
    <comment></comment>  </data>
  <data name="Appraisal_Start_001" xml:space="preserve">
    <value>Espera aquí.[pause=0] Sólo será un segundo. </value>
    <comment></comment>  </data>
  <data name="Item_Give_Storage" xml:space="preserve">
    <value>{0} fue enviado a la consigna.</value>
    <comment></comment>  </data>
  <data name="Shop_Bag_Empty" xml:space="preserve">
    <value>¿Oh?[pause=0] ¿Nada para vender?</value>
    <comment></comment>  </data>
  <data name="Shop_Bag_Full" xml:space="preserve">
    <value>¡Oh![pause=0] ¡No tienes más espacio para objetos!</value>
    <comment></comment>  </data>
  <data name="Shop_Buy" xml:space="preserve">
    <value>¡Muy bien![pause=0] ¡Siéntete libre de examinar mi mercancía! (Puedes usar {0} para seleccionar múltiples objetos)</value>
    <comment></comment>  </data>
  <data name="Shop_Buy_Complete" xml:space="preserve">
    <value>¡Muchas gracias! Todo tuyo~</value>
    <comment></comment>  </data>
  <data name="Shop_Buy_Empty" xml:space="preserve">
    <value>Todo está agotado.[pause=0] Por favor perdóname.[pause=0] ¡Tendré nueva mercancía mañana!</value>
    <comment></comment>  </data>
  <data name="Shop_Buy_No_Money" xml:space="preserve">
    <value>¿Qué?[pause=0] No parece que tengas el dinero.</value>
    <comment></comment>  </data>
  <data name="Shop_Info_001" xml:space="preserve">
    <value>¡Esta tienda se especializa en vender objetos!</value>
    <comment></comment>  </data>
  <data name="Shop_Info_002" xml:space="preserve">
    <value>¡Los objetos son útiles en tus aventuras en las mazmorras! </value>
    <comment></comment>  </data>
  <data name="Shop_Info_003" xml:space="preserve">
    <value>¡Usa los objetos con imaginación! ¡Y inventa nuevos usos para ellas!</value>
    <comment></comment>  </data>
  <data name="Shop_Info_004" xml:space="preserve">
    <value>Si la tienda agota sus existencias,[pause=0] ¡siempre tendremos nuevas cosas para vender el día siguiente!</value>
    <comment></comment>  </data>
  <data name="Shop_Info_005" xml:space="preserve">
    <value>¡Asi que pasa el tiempo en las mazmorras hasta que reponamos! Visítanos cuando vuelvas~</value>
    <comment></comment>  </data>
  <data name="Shop_Intro" xml:space="preserve">
    <value>Hola~\u266A \nBienvenido a la Tienda Kecleon~\u266A</value>
    <comment></comment>  </data>
  <data name="Shop_Intro_Return" xml:space="preserve">
    <value>¿Puedo ayudarte con algo más?</value>
    <comment></comment>  </data>
  <data name="Shop_Option_Buy" xml:space="preserve">
    <value>Comprar</value>
    <comment></comment>  </data>
  <data name="Shop_Option_Sell" xml:space="preserve">
    <value>Vender</value>
    <comment></comment>  </data>
  <data name="Swap_Intro_Return" xml:space="preserve">
    <value>¿Algo más?</value>
    <comment></comment>  </data>
</root>