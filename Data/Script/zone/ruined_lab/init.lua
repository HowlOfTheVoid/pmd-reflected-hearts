--[[
    init.lua
    Created: 07/22/2023 23:21:27
    Description: Autogenerated script file for the map ruined_lab.
]]--
-- Commonly included lua functions and data
require 'common'

-- Package name
local ruined_lab = {}

-------------------------------
-- Zone Callbacks
-------------------------------
---ruined_lab.Init(zone)
--Engine callback function
function ruined_lab.Init(zone)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  PrintInfo("=>> Init_secret_garden")
end

---ruined_lab.EnterSegment(zone, rescuing, segmentID, mapID)
--Engine callback function
function ruined_lab.EnterSegment(zone, rescuing, segmentID, mapID)
    if rescuing ~= true then
        COMMON.BeginDungeon(zone.ID, segmentID, mapID)
     end
end

---ruined_lab.ExitSegment(zone, result, rescue, segmentID, mapID)
--Engine callback function
function ruined_lab.ExitSegment(zone, result, rescue, segmentID, mapID)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine
  PrintInfo("=>> ExitSegment_secret_garden result "..tostring(result).." segment "..tostring(segmentID))
  
  --first check for rescue flag; if we're in rescue mode then take a different path
  COMMON.ExitDungeonMissionCheck(zone.ID, segmentID)
    if rescue == true then
    COMMON.EndRescue(zone, result, segmentID)
    elseif result ~= RogueEssence.Data.GameProgress.ResultType.Cleared then
    COMMON.EndDungeonDay(result, SV.checkpoint.Zone, SV.checkpoint.Segment, SV.checkpoint.Map, SV.checkpoint.Entry)
    else
    if segmentID == 0 then
        GAME:ContinueDungeon('ruined_lab', 1, 0, 0)
    else
        PrintInfo("No exit procedure found!")
	    COMMON.EndDungeonDay(result, SV.checkpoint.Zone, SV.checkpoint.Segment, SV.checkpoint.Map, SV.checkpoint.Entry)
    end
   end
end

---ruined_lab.Rescued(zone, name, mail)
--Engine callback function
function ruined_lab.Rescued(zone, name, mail)


end

return ruined_lab

