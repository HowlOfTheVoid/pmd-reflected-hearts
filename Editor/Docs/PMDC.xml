<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PMDC</name>
    </assembly>
    <members>
        <member name="F:PMDC.Data.MonsterFeatureData.FeatureData">
            <summary>
            Maps monster, form to summary
            </summary>
        </member>
        <member name="F:PMDC.Data.RarityData.RarityMap">
            <summary>
            Maps monster, rarity to list of applicable items 
            </summary>
        </member>
        <member name="M:PMDC.Dev.DevHelper.PrintAllUnfinishedMoves">
            <summary>
            Prints all the moves that can appear in the game due to the monsters appearing in the game, and alerts which unfinished ones need to be finished
            </summary>
        </member>
        <member name="M:PMDC.Dev.DevHelper.PrintAbilityUsers(System.String)">
            <summary>
            Gets the abilities from a text file in the path, and prints the monsters that are capable of each.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:PMDC.Dev.DevHelper.PrintMoveUsers(System.String)">
            <summary>
            Gets the moves from a text file in the path, and prints the monsters that are capable of using each.
            </summary>
            <param name="path"></param>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.TeamPartner">
            <summary>
            will not attack enemyoffriend
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.Cannibal">
            <summary>
            will attack allies if given the opportunity
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.ItemGrabber">
            <summary>
            will pick up items
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.ItemMaster">
            <summary>
            Knows how to use items
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.KnowsMatchups">
            <summary>
            Is aware of move-neutralizing abilities
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.AttackToEscape">
            <summary>
            Uses moves to escape
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.WontDisturb">
            <summary>
            will not attack sleepers/the frozen
            but will still wait on them to thaw out instead of walking away
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.TrapAvoider">
            <summary>
            Avoids traps
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.PlayerSense">
            <summary>
            Has the sensibilities of a player team's ally
            will not walk into silcoon/cascoon
            will not hit allies even if it's worth it to hit more foes
            will not path to the last seen location of an enemy if it finds no enemies
            will not attack or target certain AI
            will not attack or target sleepers and frozen, full stop
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.IQ">
            <summary>
            The strategy that the monster takes when it goes aggro
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.AttackChoice.StandardAttack">
            <summary>
            Only chooses standard attack.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.AttackChoice.DumbAttack">
            <summary>
            randomly chooses moves based on weight, sometimes walks within range due to missing moves having weight
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.AttackChoice.RandomAttack">
            <summary>
            randomly chooses moves based on weight, always attacks with damaging moves when within range, but sometimes moves forward if the only choice is a status move
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.AttackChoice.StatusAttack">
            <summary>
            randomly chooses a status move first and foremost
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.AttackChoice.SmartAttack">
            <summary>
            always chooses the best move, and always attacks when within range
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.PositionChoice.Approach">
            <summary>
            move in even if it's out of range of moves
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.PositionChoice.Close">
            <summary>
            move in as close as possible within range of moves
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.PositionChoice.Avoid">
            <summary>
            move as far as possible within range
            </summary>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.canPassChar(RogueEssence.Dungeon.Character,RogueEssence.Dungeon.Character,System.Boolean)">
            <summary>
            Checks if the controlled character can push over the target character, based on ordering and matchup
            </summary>
            <param name="controlledChar"></param>
            <param name="destChar"></param>
            <param name="yieldToTeam">Considers other team members non-passable, even if they are lower rank.</param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.playerSensibleToAttack(RogueEssence.Dungeon.Character)">
            <summary>
            Is it sensible for a player character to attack this way?
            </summary>
            <param name="seenChar"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.GetPaths(RogueEssence.Dungeon.Character,RogueElements.Loc[],System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Gets the path directly to a target
            </summary>
            <param name="controlledChar"></param>
            <param name="end"></param>
            <param name="freeGoal">Determines whether the goal should be reachable even if blocked.</param>
            <param name="respectPeers">Considers entities as blockers</param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.GetPathsImpassable(RogueEssence.Dungeon.Character,System.Collections.Generic.List{RogueElements.Loc})">
            <summary>
            Gets all paths to all targets, only considering impassable blocks as blockers.
            </summary>
            <param name="controlledChar"></param>
            <param name="ends"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.TryAttackChoice(RogueElements.IRandom,RogueEssence.Dungeon.Character,PMDC.Dungeon.AIPlan.AttackChoice,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rand"></param>
            <param name="controlledChar"></param>
            <param name="attackPattern"></param>
            <param name="includeImagine">Excludes imaginary hits from causing attack fallthrough.  This will also skip threat checking.</param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.TryBestAttackChoice(RogueElements.IRandom,RogueEssence.Dungeon.Character,System.Collections.Generic.List{RogueEssence.Dungeon.Character},RogueEssence.Dungeon.Character)">
            <summary>
            Always chooses the best attack
            </summary>
            <param name="rand"></param>
            <param name="controlledChar"></param>
            <param name="defaultDir"></param>
            <param name="seenChars"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.UpdateHighestIndices(System.Collections.Generic.List{PMDC.Dungeon.ActionDirValue},RogueEssence.Dungeon.GameAction,PMDC.Dungeon.HitValue[])">
            <summary>
            Updates the highest indices list with the GameAction with the highest score.
            </summary>
            <param name="highestIndices"></param>
            <param name="baseAction">Non-directional action to use.  Direction will be selected when adding to list.</param>
            <param name="attackDirs"></param>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.UpdateTotalIndices(RogueElements.IRandom,System.Collections.Generic.List{PMDC.Dungeon.ActionDirValue},RogueEssence.Dungeon.GameAction,PMDC.Dungeon.HitValue[])">
            <summary>
            Updates the highest indices list with the GameAction with all scores.
            </summary>
            <param name="rand"></param>
            <param name="totalIndices"></param>
            <param name="baseAction">Non-directional action to use.  Direction will be selected when adding to list.</param>
            <param name="attackDirs"></param>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.GetActionValues(RogueEssence.Dungeon.Character,System.Collections.Generic.List{RogueEssence.Dungeon.Character},RogueEssence.Dungeon.Character,System.String,PMDC.Dungeon.HitValue[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="controlledChar"></param>
            <param name="closestThreat">A character that will be used to judge an imagined hit. Leave blank for no imagined hits.</param>
            <param name="seenChars"></param>
            <param name="moveIndex"></param>
            <param name="dirs"></param>
            <param name="includeImagined">Whether or not we want to consider hypothetical hit weights.</param>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.FillRangeTargets(RogueEssence.Dungeon.Character,System.Collections.Generic.List{RogueEssence.Dungeon.Character},System.Collections.Generic.Dictionary{RogueElements.Loc,PMDC.Dungeon.RangeTarget},System.Boolean)">
            <summary>
            
            </summary>
            <param name="controlledChar"></param>
            <param name="seenChars"></param>
            <param name="endHash"></param>
            <param name="blindspotOnly">Will only treat blindspot attacks as attacks that need to path to tiles.</param>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.GetTargetEffect(RogueEssence.Dungeon.Character,System.String,RogueEssence.Data.SkillData,System.Collections.Generic.List{RogueEssence.Dungeon.Character},RogueEssence.Dungeon.Character,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="controlledChar"></param>
            <param name="moveIndex"></param>
            <param name="entry"></param>
            <param name="seenChars"></param>
            <param name="target"></param>
            <param name="rangeMod"></param>
            <returns>Positive number means a positive effect for the target, negative number means a negative effect for the target.</returns>
        </member>
        <member name="M:PMDC.Dungeon.AttackFoesPlan.comparePathValues(PMDC.Dungeon.AIPlan.PositionChoice,PMDC.Dungeon.RangeTarget,PMDC.Dungeon.RangeTarget)">
            <summary>
            1 = better, -1 worse, 0 = equal 
            </summary>
            <param name="newVal"></param>
            <param name="curBest"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.PrepareWithLeaderPlan.closestToHighestLeader(RogueEssence.Dungeon.Character)">
            <summary>
            Checks if the controlled character is close to the highest ranking member in sight.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.PrepareWithLeaderPlan.transitivelyTouchesLeader(RogueEssence.Dungeon.Character)">
            <summary>
            Checks if the controlled character is transitively close to THE leader. Unsure if should use this method.
            </summary>
            <param name="controlledChar"></param>
            <returns></returns>
        </member>
        <member name="T:PMDC.Dungeon.ThiefPlan">
            <summary>
            will attack players if its original item is their current item, or if its has no item
            will use dash moves to get away, if given the chance
            runs away using A*
            does not pick up items
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PMDC.Dungeon.DmgMult" -->
        <!-- Badly formed XML comment ignored for member "T:PMDC.Dungeon.AccMult" -->
        <member name="T:PMDC.Dungeon.AttackOnlyEvent">
            <summary>
            Prevents all interactions except for using moves and normal attack.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RespawnFromRandomEvent.Radius">
            <summary>
            The radius from the player characters from which to spawn.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RespawnBaseEvent.MaxFoes">
            <summary>
            The limit to the number of enemies on the map.  If this number is reached or exceeded, no more respawns will occur.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RespawnBaseEvent.RespawnTime">
            <summary>
            The amount of time it takes for a new enemy team to respawn, in turns.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.DespawnRadiusEvent.Radius">
            <summary>
            The maximum radius from a player that enemies are allowed to remain.  Go farther than this when the check occurs, and the enemy despawns.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.DespawnRadiusEvent.DespawnTime">
            <summary>
            The amount of time it takes for a new enemy team to respawn, in turns.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HandoutScaledExpEvent">
            <summary>
            EXP handed out for defeating an enemy is scaled based on the enemy's level.
            BaseEXP * Numerator * Level / Denominator + 1
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HandoutConstantExpEvent">
            <summary>
            EXP handed out for defeating an enemy is equal to its base EXP yield without any changes.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HandoutRelativeExpEvent">
            <summary>
            EXP handed out to each team member is scaled based on the team member's level relative to the defeated enemy's level.
            BaseEXP * Numerator * (2 * EnemyLv + LevelBuffer) ^ 3 / (EnemyLv + PlayerLv + LevelBuffer) ^ 3 / Denominator + 1
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CompassEvent.EligibleTiles">
            <summary>
            Tiles eligible to be pointed to.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.ChestStep`1">
            <summary>
            A monster house that takes the form of a booby-trapped chest.
            Once opened, items spill out, the walls lock down, and monsters appear.
            All must be defeated in order to unlock.
            It could also just be a normal chest.
            This step chooses an existing room to put the house in.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.ChestStep`1.Ambush">
            <summary>
            Determines if this is actually a monster house and not just a chest with treasure.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.ChestStep`1.Filters">
            <summary>
            Used to filter out unwanted rooms to be used for this monster house.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.BaseDetourStep`1.Treasures">
            <summary>
            Treasures found in the detour room.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.BaseDetourStep`1.TileTreasures">
            <summary>
            Tiles (such as exits or traps) found in the detour room.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.BaseDetourStep`1.GuardTypes">
            <summary>
            Enemies found in the detour room.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.BaseDetourStep`1.HallLength">
            <summary>
            Length of the hall connecting the main path to the detour room.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.BaseDetourStep`1.GenericRooms">
            <summary>
            The possible types of room shapes.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.KeyDetourStep`1">
            <summary>
            Adds an extra room to the layout that can only be accessed by using a key item.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.KeyDetourStep`1.LockedTile">
            <summary>
            The tile with which to lock the room with.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.KeyDetourStep`1.KeyItem">
            <summary>
            The item with which to unlock the room with.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SwitchDetourStep`1">
            <summary>
            Adds an extra room to the layout that can only be accessed by pushing a switch.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.SwitchDetourStep`1.SealedTile">
            <summary>
            The tile with which to lock the room with.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SwitchDetourStep`1.SwitchTile">
            <summary>
            The tile that serves as the switch to open the door.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SwitchDetourStep`1.TimeLimit">
            <summary>
            Determines if a time limit is triggered when pressing the switch.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SwitchDetourStep`1.EntranceCount">
            <summary>
            The number of detours created.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.AddBossRoomStep`1">
            <summary>
            Given a floor plan, this step attaches a boss room connected to an existing room, and then attaches a vault room that is unlocked when the player defeats the boss.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.Filters">
            <summary>
            Determines which rooms are eligible to have the boss room added on.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.BossRooms">
            <summary>
            The room types that can be used for the boss room being added.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.BossComponents">
            <summary>
            Components that the newly added boss room will be labeled with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.TreasureRooms">
            <summary>
            The room types that can be used for the treasure room being added.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.VaultComponents">
            <summary>
            Components that the newly added treasure room will be labeled with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.GenericHalls">
            <summary>
            The room types that can be used as the intermediate hall.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.BossHallComponents">
            <summary>
            Components that the hall between the boss room and the rest of the layout will be labeled with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.VaultHallComponents">
            <summary>
            Components that the hall between the boss room and the vault room will be labeled with.
            </summary>
        </member>
        <member name="M:PMDC.LevelGen.AddBossRoomStep`1.PrepareBossRoom(RogueElements.IRandom,RogueElements.FloorPlan,System.Boolean)">
            <summary>
            Returns a random boss room or hall that can fit in the specified floor.
            </summary>
            <param name="rand"></param>
            <param name="floorPlan"></param>
            <param name="isHall"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.LevelGen.AddBossRoomStep`1.PrepareTreasureRoom(RogueElements.IRandom,RogueElements.FloorPlan,System.Boolean)">
            <summary>
            Returns a random boss room or hall that can fit in the specified floor.
            </summary>
            <param name="rand"></param>
            <param name="floorPlan"></param>
            <param name="isHall"></param>
            <returns></returns>
        </member>
        <member name="T:PMDC.LevelGen.FloorStairsDistanceStep`3">
            <summary>
            Adds the entrance and exit to the floor.  Is room-conscious.
            The algorithm will try to place them within and outside of a certain specified range.
            </summary>
            <typeparam name="TGenContext"></typeparam>
            <typeparam name="TEntrance"></typeparam>
            <typeparam name="TExit"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.FloorStairsDistanceStep`3.Distance">
            <summary>
            Range of distance in tiles that entrances and exits mut be apart.  start-inclusive, end-exclusive
            </summary>
        </member>
        <member name="M:PMDC.LevelGen.FloorStairsDistanceStep`3.GetOutlet``1(`0,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Attempt to choose an outlet in a room with no entrance/exit, and updates their availability.  If none exists, default to a chosen room.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="map"></param>
            <param name="free_indices"></param>
            <param name="used_indices"></param>
            <returns></returns>
        </member>
        <member name="T:PMDC.LevelGen.GridPathBeetle`1">
            <summary>
            Populates the empty floor plan of a map by creating a path consisting of one big room in the middle, with normal rooms connected to it.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.GridPathBeetle`1.Vertical">
            <summary>
            Choose a horizontal or vertical orientation.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.GridPathBeetle`1.LegPercent">
            <summary>
            The number of small rooms attached to the main large room, as a percent of the rooms possible.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.GridPathBeetle`1.ConnectPercent">
            <summary>
            The number of connections between adjacent small rooms, as a percent of the connections possible.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.GridPathBeetle`1.FromCorners">
            <summary>
            Allows the main body to be in a corner instead of in the center.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.GridPathBeetle`1.GiantHallGen">
            <summary>
            The room types that can be used for the giant room in the layout.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.GridPathBeetle`1.LargeRoomComponents">
            <summary>
            Components that the giant room will be labeled with.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SetGridInnerComponentStep`1">
            <summary>
            Takes all rooms in the INSIDE of a map's grid plan and gives them a specified component.
            These components can be used to identify the room in some way for future filtering.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.MapDataStep`1">
            <summary>
            Sets various attributes about the map.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.MapDataStep`1.Music">
            <summary>
            The default map music.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MapDataStep`1.TimeLimit">
            <summary>
            How many turns the player can spend on the map before an instant game over.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MapDataStep`1.TileSight">
            <summary>
            The darkness level for map exploration.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MapDataStep`1.CharSight">
            <summary>
            The darkness level for character viewing.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MapDataStep`1.ClampCamera">
            <summary>
            Clamps the map edges so that the camera does not scroll past them.  Does not work on wrapped-around maps.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MapTitleDropStep`1">
            <summary>
            Sets only time limit for the map.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.MapTimeLimitStep`1">
            <summary>
            Sets only time limit for the map.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.MapTimeLimitStep`1.TimeLimit">
            <summary>
            How many turns the player can spend on the map before an instant game over.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.DefaultMapStatusStep`1">
            <summary>
            Adds a map status that is considered the "default" for that map.
            The map will always revert back to this status even if replaced (it will wait for the replacing status to run out).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.DefaultMapStatusStep`1.SetterID">
            <summary>
            The map status used to set the default map status.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.DefaultMapStatusStep`1.DefaultMapStatus">
            <summary>
            The possible default map statuses.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.StateMapStatusStep`1">
            <summary>
            Adds a map status to the map, with the specified MapStatusStates
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.MapTileStep`1">
            <summary>
            Sets terrain in a room to a certain value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.MapTileStep`1.Tile">
            <summary>
            Tile representing the water terrain to paint with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.MapTileStep`1.TerrainStencil">
            <summary>
            Determines which tiles are eligible to be painted on.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnSettingsStep`1">
            <summary>
            Chooses the enemy limit and respawn time for the map.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnSettingsStep`1.Priority">
            <summary>
            Priority of execution in Turn End operations
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnSettingsStep`1.Respawn">
            <summary>
            The respawn step.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnSettingsStep`1.MaxFoes">
            <summary>
            OBSOLETE
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnSettingsStep`1.RespawnTime">
            <summary>
            OBSOLETE
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MonsterHallStep`1">
            <summary>
            A monster house that occurs in hallways.
            The room will gradually crumble away to reveal all monsters and items.
            This step chooses an existing room (hallways are rooms) to put the house in.  The room must have a one-tile chokepoint to be selected.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.MonsterHallStep`1.Filters">
            <summary>
            Used to filter out unwanted rooms to be used for this monster house.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.MonsterHallStep`1.Size">
            <summary>
            The final size of the room after the crumbling finishes.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.MonsterHouseBaseStep`1.Items">
            <summary>
            Items that can be found in the monster house.
            This is in addition to the items naturally found on the map.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.MonsterHouseBaseStep`1.ItemThemes">
            <summary>
            Themes that items in the item pool will be filtered by.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.MonsterHouseBaseStep`1.Mobs">
            <summary>
            Mobs that can be found in the monster house.
            This is in addition to the mobs naturally found on the map.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.MonsterHouseBaseStep`1.MobThemes">
            <summary>
            Themes that mobs in the mob pool will be filtered by.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MonsterHouseStep`1">
            <summary>
            A standard monster house that appears as a room filled with treasure.
            When an explorer enters the premises, the monsters appear.
            This step chooses an existing room to put the house in.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.MonsterHouseStep`1.Filters">
            <summary>
            Used to filter out unwanted rooms to be used for this monster house.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MonsterMansionStep`1">
            <summary>
            A monster house that consists of the entire floor.
            When it activates, you can see all enemies on the map, and all enemies can see you.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.PatternPlacerStep`1.AllowTerminal">
            <summary>
            Allows terminal rooms as spawn.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.PatternPlacerStep`1.TerrainStencil">
            <summary>
            Determines which tiles are eligible to be painted on.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.PatternPlan.MapID">
            <summary>
            Map file to load.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.PatternSpawnStep`2">
            <summary>
            Litters placeables on a room in specified patterns.
            </summary>
            <typeparam name="TGenContext"></typeparam>
            <typeparam name="TSpawnable"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.PatternTerrainStep`1">
            <summary>
            Litters placeables on a room in specified patterns.
            </summary>
            <typeparam name="TGenContext"></typeparam>
            <typeparam name="TSpawnable"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.PatternTerrainStep`1.Terrain">
            <summary>
            Tile representing the water terrain to paint with.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.RoomPostProcStep`1">
            <summary>
            Sets terrain in a room to a certain value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.RoomPostProcStep`1.PostProc">
            <summary>
            Tile representing the water terrain to paint with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.RoomPostProcStep`1.TerrainStencil">
            <summary>
            Determines which tiles are eligible to be painted on.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.RoomPostProcStep`1.IncludeHalls">
            <summary>
            Makes halls eligible for spawn.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.RoomPostProcStep`1.IncludeRooms">
            <summary>
            Makes halls eligible for spawn.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.NoConnectRoom">
            <summary>
            Rooms that are disconnected from the main path.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.NoEventRoom">
            <summary>
            Rooms that should not have any events taking place in them.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.RoomGenEvo`1">
            <summary>
            Generates an evolution room.  It's 7x6 in size and hardcoded to look a specific way.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.RoomGenEvoSmall`1">
            <summary>
            Generates an evolution room.  It's 5x6 in size and hardcoded to look a specific way.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.RoomGenGuardedCave`1">
            <summary>
            Generates a cave guarded by a single mob.  It's hardcoded to look a specific way.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.RoomGenSpecificBoss`1">
            <summary>
            Generates a boss room with specific tiles and mobs.
            EDITOR UNFRIENDLY
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.RoomGenWaterRing`1">
            <summary>
            Generates a room containing a ring of water encircling treasure.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.RoomGenWaterRing`1.PadWidth">
            <summary>
            The extra width of the room added to the area occupied by the water ring.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.RoomGenWaterRing`1.PadHeight">
            <summary>
            The extra height of the room added to the area occupied by the water ring.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.RoomGenWaterRing`1.ItemAmount">
            <summary>
            The amount of items to spawn.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.RoomGenWaterRing`1.Treasures">
            <summary>
            Which items to spawn.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.RoomGenWaterRing`1.WaterTerrain">
            <summary>
            The terrain used for the water ring.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.UnVaultableRoom">
            <summary>
            Rooms that should not be considered for attaching vault entrances.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.RoomTerrainStep`1">
            <summary>
            Sets terrain in a room to a certain value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.RoomTerrainStep`1.Terrain">
            <summary>
            Tile representing the water terrain to paint with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.RoomTerrainStep`1.TerrainStencil">
            <summary>
            Determines which tiles are eligible to be painted on.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.RoomTerrainStep`1.IncludeHalls">
            <summary>
            Makes halls eligible for spawn.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.RoomTerrainStep`1.IncludeRooms">
            <summary>
            Makes halls eligible for spawn.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.BaseSealStep`1.Filters">
            <summary>
            Determines the rooms that serve as a vault and are to be locked away.
            </summary>
        </member>
        <member name="M:PMDC.LevelGen.BaseSealStep`1.sealBorderRay(`0,System.Collections.Generic.Dictionary{RogueElements.Loc,PMDC.LevelGen.BaseSealStep{`0}.SealType},RogueElements.IFloorRoomPlan,RogueElements.LocRay8,RogueElements.Dir8,RogueElements.Dir8)">
            <summary>
            chooses and caegorizes the tile to be sealed
            </summary>
            <param name="map"></param>
            <param name="sealList"></param>
            <param name="plan"></param>
            <param name="loc"></param>
            <param name="dir"></param>
            <returns>Whether it affected the tile outwards or not</returns>
        </member>
        <member name="T:PMDC.LevelGen.BossSealStep`1">
            <summary>
            One part of several steps used to create a boss room.
            This step takes an already-placed boss room, with an already-placed summoning tile and fills it with data on which tiles to lock down before summoning the boss.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.BossSealStep`1.SealedTile">
            <summary>
            The tile used to seal the room.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.BossSealStep`1.BossTile">
            <summary>
            The tile used to summon the battle.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.BossSealStep`1.BossFilters">
            <summary>
            Singles out the boss room intended for this process.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.GuardSealStep`1">
            <summary>
            One part of several steps used to create a sealed key room, or several thereof.
            This step takes the target rooms and surrounds them with unbreakable walls, with one key block used to unlock them.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.KeySealStep`1">
            <summary>
            One part of several steps used to create a sealed key room, or several thereof.
            This step takes the target rooms and surrounds them with unbreakable walls, with one key block used to unlock them.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.KeySealStep`1.LockedTile">
            <summary>
            The tile that is used to block off the room.
            It is removed when the player inserts the key into the Key Tile.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.KeySealStep`1.KeyTile">
            <summary>
            The tile with which to lock the room with, requiring a key to open.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.KeySealStep`1.KeyItem">
            <summary>
            The item to be used as a key to unlock the vault.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SwitchSealStep`1">
            <summary>
            One part of several steps used to create a switch-opened sealed room, or several thereof.
            This step takes the target rooms and surrounds them with unbreakable walls, with one key block used to unlock them.
            The filter must be able to single out the key rooms intended for this process.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.SwitchSealStep`1.SealedTile">
            <summary>
            The tile that is used to block off the room.
            It is removed when the player pressed the switch.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SwitchSealStep`1.SwitchTile">
            <summary>
            The switch tile that unlocked the vaults.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SwitchSealStep`1.Amount">
            <summary>
            Determines how many switches need to be placed.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SwitchSealStep`1.Revealed">
            <summary>
            Determines if the switch tile is revealed.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SwitchSealStep`1.TimeLimit">
            <summary>
            Determines if a time limit is triggered when pressing the switch.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.SwitchSealStep`1.SwitchFilters">
            <summary>
            Determines the rooms that the switch can be placed in.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.TerrainSealStep`1">
            <summary>
            One part of several steps used to create a room sealed by terrain, or several thereof.
            This step takes the target rooms and surrounds them with the selected walls, with one key block used to unlock them.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.TerrainSealStep`1.SealTerrain">
            <summary>
            The tile that is used to block off the main entrance to the room.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.TerrainSealStep`1.BorderTerrain">
            <summary>
            The tile that is used to border the room.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.ShopStep`1">
            <summary>
            Spawns a shop somewhere in the map.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.ShopStep`1.SecurityStatus">
            <summary>
            The map status used to check for thievery.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.ShopStep`1.Items">
            <summary>
            The items that can be sold in the shop.
            This is filtered by Item Themes when generating.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.ShopStep`1.ItemThemes">
            <summary>
            Every shop chooses a theme to populate its catalog with.
            This variable determines the possible themes to filter the items with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.ShopStep`1.Mobs">
            <summary>
            The mobs that will be spawned if the player is caught stealing.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.ShopStep`1.StartMob">
            <summary>
            The mob that will run the shop.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.ShopStep`1.Filters">
            <summary>
            Narrows down the rooms in the map that the shop can spawn in.  No boss rooms, etc.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.ShopStep`1.Personality">
            <summary>
            The personality of the shopkeeper.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.TempTileStep`1">
            <summary>
            One part of several steps used to create a switch-opened sealed room, or several thereof.
            This step takes the target rooms and surrounds them with unbreakable walls, with one key block used to unlock them.
            The filter must be able to single out the key rooms intended for this process.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.TempTileStep`1.TempTile">
            <summary>
            The temp tile
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.TempTileStep`1.TempStatus">
            <summary>
            The status to keep track of the countdown
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.TempTileStep`1.TileFilters">
            <summary>
            Determines the rooms that the switch can be placed in.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobCheckVersionDiff">
            <summary>
            Spawns the mob if the player's random seed has a specific remainder when divided by a specific number.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobCheckVersionDiff.Div">
            <summary>
            The number to divide the player's seed by.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobCheckVersionDiff.Remainder">
            <summary>
            The remainder to check for when dividing the player's seed.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobCheckSaveVar">
            <summary>
            Spawns the mob if the player's savevar is true.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobCheckSaveVar.SaveVar">
            <summary>
            The savevar to query
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobCheckTimeOfDay">
            <summary>
            Spawns the mob if the time of day is right.  DOESNT WORK.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobCheckTimeOfDay.Time">
            <summary>
            The time of day
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnWeak">
            <summary>
            Spawns the mob with a 35% fullness and 50% PP.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnAltColor">
            <summary>
            Spawns the mob with a custom shiny chance.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnAltColor.Odds">
            <summary>
            One-in-this chance.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnMovesOff">
            <summary>
            Spawns the mob with moves turned off.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnMovesOff.StartAt">
            <summary>
            The move index to start turning moves off.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnMovesOff.Remove">
            <summary>
            Remove the moves entirely.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnBoost">
            <summary>
            Spawn the mob with stat boosts (vitamin boosts)
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnScaledBoost">
            <summary>
            Spawn the mob with stat boosts (vitamin boosts) that scale based on its level
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnItem">
            <summary>
            Spawn the mob with an item.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnItem.Items">
            <summary>
            The possible items.  Picks one.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnItem.MapStartOnly">
            <summary>
            Only give it the item on map generation.
            Respawns that occur after the map is generated do not get the item.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnInv">
            <summary>
            Spawn the mob with its inventory filled with the specified items.
            Inventory items are not dropped when the mob is defeated.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnInv.Items">
            <summary>
            Items to give.  All of them will be placed in the mob's inventory.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnInv.MapStartOnly">
            <summary>
            Only give it the item on map generation.
            Respawns that occur after the map is generated do not get the item.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnLevelScale">
            <summary>
            Spawn the mob with a level that scales based on the current floor
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnLevelScale.StartFromID">
            <summary>
            The floor to start scaling level at.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnLevelScale.AddNumerator">
            <summary>
            The numerator for the fractional level to add per floor.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnLevelScale.AddDenominator">
            <summary>
            The denominator for the fractional level to add per floor.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnLoc">
            <summary>
            Spawn the mob with a specific location and direction
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnLoc.Loc">
            <summary>
            The location.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnLoc.Dir">
            <summary>
            The direction.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnUnrecruitable">
            <summary>
            Spawn the mob with recruitment turned off.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnFoeConflict">
            <summary>
            Spawns the mob with aggression towards enemy mobs.  Only applies to neutral mobs.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnInteractable">
            <summary>
            Spawn the mob with an effect on interaction.  Only applies to allies or neutral mobs.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnLuaTable">
            <summary>
            Spawn the mob with a lua data table.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnLuaTable.LuaTable">
            <summary>
            The lua table.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnDiscriminator">
            <summary>
            Spawn the mob with a discriminator.  This is used for personality calculations.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.RescueSpawner`1">
            <summary>
            Spawns a rescue flag somewhere on the map, complete with a Monster House.
            This step should never be explicitly added to a map's gen steps.
            Instead, it needs to be dynamically added only when in rescue mode.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.SpacedRoomSpawnStep`2">
            <summary>
            Spawns objects in randomly chosen rooms.  Once a room is chosen, it and adjacent rooms cannot be chosen.
            Large rooms have the same probability as small rooms.
            </summary>
            <typeparam name="TGenContext"></typeparam>
            <typeparam name="TSpawnable"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.SpacedRoomSpawnStep`2.IncludeHalls">
            <summary>
            Makes halls eligible for spawn.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SetCompassStep`1">
            <summary>
            Orients all already-placed compass tiles to point to points of interest.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.SetCompassStep`1.CompassTile">
            <summary>
            Tile used as compass.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.FloorNameDropZoneStep">
            <summary>
            Names all floors of the dungeon segment according to a naming convention.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.FloorNameDropZoneStep.DropPriority">
            <summary>
            At what point in the map start to drop the title.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SaveVarsZoneStep">
            <summary>
            The zone step responsible for placing the rescue tile and monster house when a rescue is active.
            Does nothing otherwise.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SaveVarsZoneStep.Priority">
            <summary>
            At what point in the map gen process to run the step in.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SpreadBossZoneStep">
            <summary>
            Generates boss battles randomly across the whole dungeon segment.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadBossZoneStep.ItemAmount">
            <summary>
            Amount for the items randomly chosen from spawnlist
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SpreadHouseZoneStep">
            <summary>
            Generates monster houses randomly across the whole dungeon segment.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadHouseZoneStep.Priority">
            <summary>
            At what point in the map gen process to run the step in.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SpreadVaultZoneStep">
            <summary>
            Generates vaults randomly across the whole dungeon segment.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.ItemPriority">
            <summary>
            At what point in the map gen process to run the item placement steps in.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.TilePriority">
            <summary>
            At what point in the map gen process to run the tile placement steps in.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.MobPriority">
            <summary>
            At what point in the map gen process to run the mob placement steps in.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.Items">
            <summary>
            Encounter table for items found in the vault.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.ItemAmount">
            <summary>
            Amount of the items randomly chosen from spawnlist
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.ItemSpawners">
            <summary>
            Spawners for specific items
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.ItemPlacements">
            <summary>
            Step used to place the items
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.TileSpawners">
            <summary>
            Spawners for specific items
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.Mobs">
            <summary>
            Encounter table for mobs found in the vault.
            </summary>
        </member>
        <member name="T:PMDC.Program">
            <summary>
            The main class.
            </summary>
        </member>
        <member name="M:PMDC.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:PMDC.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PMDC.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PMDC.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:PMDC.Properties.Resources.Icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
    </members>
</doc>
